networks:
  compose-bridge:
    driver: bridge

services:
  valkey:
    image: valkey/valkey:latest
    container_name: valkey-instance
    networks:
      - compose-bridge
    healthcheck:
      test: [ "CMD-SHELL", "valkey-cli", "ping" ]
      interval: 2s
      timeout: 5s
      retries: 10

  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      MINIO_ROOT_USER: "ranishot"
      MINIO_ROOT_PASSWORD: "09290824"
    command: server /data --console-address ":9001"
    volumes:
      - ${HOME}/minio/data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - compose-bridge
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 2s
      timeout: 5s
      retries: 10

  postgres:
    image: arm64v8/postgres:18
    restart: always
    container_name: postgres-db
    ports:
      - "5432:5432"
    networks:
      - compose-bridge
    environment:
      - POSTGRES_DB=psychology
      - POSTGRES_PASSWORD=09290824
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 2s
      timeout: 5s
      retries: 10
    volumes:
      - ${HOME}/postgres-data:/var/lib/postgresql/18/docker

  worker:
    image: ranishot/psychology_reports_api:latest
    build: .
    container_name: worker-service
    command: taskiq worker app.main:broker --workers 1
    env_file:
      - ${ENV_FILE:-dev.env}
    networks:
      - compose-bridge
    depends_on:
      valkey:
        condition: service_healthy
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy

  backend:
    image: ranishot/psychology_reports_api:latest
    build: .
    container_name: backend-service
    env_file:
      - ${ENV_FILE:-dev.env}
    command: sh -c "gunicorn app.main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000"
    networks:
      compose-bridge:
        aliases:
          - backend
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      minio:
        condition: service_healthy

  migrate:
    image: ranishot/psychology_reports_api:latest
    build: .
    container_name: alembic-migrate
    command: alembic upgrade head
    env_file:
      - ${ENV_FILE:-dev.env}
    networks:
      - compose-bridge
    depends_on:
      postgres:
        condition: service_healthy

#  frontend:
#    image: ranishot/nubank_front:latest
#    build: ../nubank_api_frontend
#    container_name: frontend-service
#    networks:
#      - compose-bridge
#    ports:
#      - "8080:80"
#    depends_on:
#      - backend